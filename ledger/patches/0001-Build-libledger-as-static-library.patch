From 9a632cb0766bf7449217a1dc135c0ee666c059d2 Mon Sep 17 00:00:00 2001
From: ilammy <me@ilammy.net>
Date: Mon, 24 Aug 2020 11:59:07 +0300
Subject: [PATCH] Build libledger as static library

We are going to migrate from using the "ledger" binary directly to
providing a programmatic API for manipulating journal files. "libledger"
library contains all necessary code, however, it's not that easy to link
it into the supporting code.

Since this code is going to be called from Java, we need a JNI wrapper
library -- a shared object exporting JNI symbols. However, recent
versions of Android does not allow shared libraries to depend on other
shared libraries [1]. Therefore if are going to pull in any native code,
it must be a single self-contained shared library.

[1]: https://android.googlesource.com/platform/bionic/+/master/android-changes-for-ndk-developers.md
     (see "Private API section)

Unfortunately, CMake does not allow to change a type of a target after
it has been created, or to easily create a different target based on
a given one. So the easiest way to get Ledger build system to produce
a static library is to patch it directly.

This changes the type of "libledger" target to STATIC, which will be
linked into a different JNI library produced outside of Ledger build.

Also note that we tell CMake to always build position-independent code.
By default Linux compilers with produce non-PIC objects when preparing
a static library (since they are expected to be linked into a static
binary). However, on Android PIC is mandatory even for binaries, let
alone for a *shared* JNI library. Make sure to use PIC.

Using libraries enables unit test builds. However, there is some issue
in our Boost build process which messes up some function signatures.
I have tried debugging it but to no avail. It seems that Boost is
compiled with BOOST_TEST_ALTERNATIVE_INIT_API, but when unit tests
are compiled this variable is not defined. Well, okay, just hack it.

Signed-off-by: ilammy <me@ilammy.net>
---
 src/CMakeLists.txt       | 8 ++++----
 test/unit/CMakeLists.txt | 8 ++++++++
 2 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index b3d13a29..f7ed4b18 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -274,13 +274,13 @@ include(GNUInstallDirs)
 
 if (BUILD_LIBRARY)
   set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
-  add_library(libledger SHARED ${LEDGER_SOURCES})
+  add_library(libledger STATIC ${LEDGER_SOURCES})
   add_ledger_library_dependencies(libledger)
   set_target_properties(libledger PROPERTIES
     PREFIX ""
-    INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}"
-    VERSION ${Ledger_VERSION_MAJOR}
-    SOVERSION ${Ledger_VERSION_MAJOR})
+    # Force build with PIC since it is going to be included into a shared library
+    POSITION_INDEPENDENT_CODE 1
+  )
 
   add_executable(ledger main.cc global.cc)
   target_link_libraries(ledger libledger)
diff --git a/test/unit/CMakeLists.txt b/test/unit/CMakeLists.txt
index 1bd5e4b3..f0e4c4aa 100644
--- a/test/unit/CMakeLists.txt
+++ b/test/unit/CMakeLists.txt
@@ -8,6 +8,14 @@ endmacro(add_ledger_test _name)
 include_directories(${PROJECT_SOURCE_DIR}/src)
 
 if (BUILD_LIBRARY)
+  # For some reason Boost thinks that is has been built as a dynamic library
+  # when in fact it is built as a static one. Dynamic library builds have
+  # BOOST_TEST_ALTERNATIVE_INIT_API enabled which changes signature of some
+  # initialization function, leading to linkage errors. I have no clue why
+  # this happens and life is too short to deal with Boost & CMake bullshit.
+  # Just define this variable to disable BOOST_TEST_ALTERNATIVE_INIT_API.
+  add_definitions(-DBOOST_TEST_INCLUDED)
+
   add_executable(UtilTests t_times.cc)
   if (HAVE_BOOST_PYTHON)
     target_link_libraries(UtilTests ${Python_LIBRARIES})
-- 
2.25.1

